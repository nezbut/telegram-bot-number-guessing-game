from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

from database.main_class_db import BotDB
import config
import asyncio

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start_command(message: Message):
    """
    A function that handles the start command.

    Args:
        message (Message): The message object that triggered the command.

    Returns:
        None
    """
    user = await BotDB.GIVE.give_user(message.from_user.username)
    if user:
        await message.answer(
            f"–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—èüëã, {message.from_user.full_name}!\n–î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ /help"
        )

    else:

        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.full_name}!üëã\n–î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ /help"
        )
        await asyncio.gather(
            BotDB.ADD.add_user(
                user=message.from_user.username,
                chat_id=message.chat.id
            ),
            BotDB.ADD.add_stat_user(
                user=message.from_user.username
            )
        )


@dp.message(Command(commands=["help"]))
async def help_command(message: Message):
    """
    A decorator that registers the function as a message handler for the "/help" command.

    Args:
        message (Message): The message object representing the incoming message.

    Returns:
        None
    """

    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µüëã\n–° —ç—Ç–∏–º –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ \"–ß–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É\"\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µüòÅ\n/help - –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n/stat - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n/go - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –ß–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É\n/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –≤ –ß–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É\n/reset - –û–±–Ω—É–ª–∏—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º"
    )


@dp.message(Command(commands=["stat"]))
async def stat_command(message: Message):
    """
    Handles the 'stat' command.

    Args:
        message (Message): The message object that triggered the command.

    Returns:
        None
    """

    stat = await BotDB.GIVE.give_stat_user(message.from_user.username)
    await message.answer(
        f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {stat['count_games']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {stat['wins']}"
    )


@dp.message(Command(commands=["reset"]))
async def reset_stat_command(message: Message):
    """
    Resets the user's statistics by updating the count of wins and count of games to zero.

    Parameters:
        message (Message): The message object containing information about the user who sent the command.

    Returns:
        None
    """

    result = await BotDB.UPDATE.update_stat_user(
        user=message.from_user.username,
        new_count_wins=0,
        new_count_games=0
    )

    if result:
        await message.answer('–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω–∞!‚úÖ')

    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π.')


@dp.message(Command(commands=["stop"]))
async def stop_game_command(message: Message):
    """
    Handles the 'stop' command.

    Args:
        message (Message): The incoming message object.

    Returns:
        None

    Raises:
        None
    """

    user = await BotDB.GIVE.give_user(message.from_user.username)
    if user and user.get('in_game'):

        result = await BotDB.stop_game(message.from_user.username)

        if result:
            await message.answer(f"–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!‚úÖ")

        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–≥—Ä—ã!‚ùå")

    else:
        await message.answer(f"–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞.ü§î")


@dp.message(Command(commands=["go"]))
async def start_game_command(message: Message):
    """
    Handles the "go" command and starts the game for the user.

    Args:
        message (Message): The message object containing information about the user.

    Returns:
        None
    """

    user = await BotDB.GIVE.give_user(message.from_user.username)
    if user and not user.get('in_game'):

        result = await BotDB.start_game(message.from_user.username)

        if result:
            await message.answer(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!üòÑ\n–ü–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!\n–í–∞–º –¥–∞–Ω–æ 10 –ø–æ–ø—ã—Ç–æ–∫")

        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.üò±")

    else:
        await message.answer(f"–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.ü§î")


@dp.message(F.text & (F.text.isdigit()) & (F.text.in_(tuple(map(lambda a: str(a), range(1, 101))))))
async def answer_user_game(message: Message):
    """
    A function that handles the user's game response.

    Parameters:
    - message: A Message object representing the user's message.

    Returns:
    - None
    """

    user = await BotDB.GIVE.give_user(message.from_user.username)
    if user and user.get('in_game'):
        win_rand_num = user['rand_num']
        attempt = user['attempt']

        try:
            user_num = int(message.text)
        except ValueError:
            return

        if attempt <= 0:
            await BotDB.stop_game(message.from_user.username)
            await message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üòî\n–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è!üòÅ'
            )
            return

        if user_num == win_rand_num:
            await BotDB.stop_game(message.from_user.username, win=True)
            await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Åüéâ\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n–í–∞—à–∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏: {attempt}')
            return

        elif win_rand_num > user_num:
            await message.answer(f'–£–≤—ã, –º–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ {user_num}')

        elif win_rand_num < user_num:
            await message.answer(f'–£–≤—ã, –º–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ {user_num}')

        await BotDB.UPDATE.update_user_attempt(
            user=message.from_user.username,
            attempt=attempt - 1
        )


@dp.message()
async def other_messages(message: Message):
    """
    An async function that handles other messages received by the bot.

    Args:
        message (Message): The message received by the bot.

    Returns:
        None
    """

    user = await BotDB.GIVE.give_user(user=message.from_user.username)
    if user and user.get('in_game'):
        await message.answer(
            f"–£ –≤–∞—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞—Ç–∞ –∏–≥—Ä–∞\n–ü–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n–£ –≤–∞—Å {user['attempt']} –ø–æ–ø—ã—Ç–æ–∫."
        )
